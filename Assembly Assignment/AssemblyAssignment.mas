/ Segment 1
While1,		LOAD		NameAddr   	/ CurAddr = &(Name[index])
		ADD		Index
		STORE		CurAddr
		CLEAR                 		/ acc = Name[index]
		ADDI		CurAddr
		SKIPCOND	800       	/ if Name[index] > null
		JUMP		Done1      	/ else we're done
Print1,		OUTPUT
		LOAD		Index		/ index++
		ADD		Incr
		STORE		Index
		JUMP        	While1		/ repeat loop for next char
Done1,		CLEAR
		JUMP		Seg2
Name,		DEC		77		/ 'M'
		DEC		105		/ 'i'
		DEC		99		/ 'c'
		DEC		104		/ 'h'
		DEC		97		/ 'a'
		DEC		101		/ 'e'
		DEC		108		/ 'l'
		DEC		13		/ new line
		DEC		65		/ 'A'
		DEC		100		/ 'd'
		DEC		97		/ 'a'
		DEC		109		/ 'm'
		DEC		115		/ 's'	
Null,		DEC		0         	/ '\0'
NameAddr,	HEX		E		/ addr of Name
Index,		DEC		0		/ current index into name[]
CurAddr,	HEX		0		/ addr of Name[index]
Incr,		DEC		1		/ for ++

/ Segment 2
Seg2,		CLEAR
		INPUT				/ get value for x
		STORE		x		/ store value for x
		INPUT				/ get value for y
		STORE		y		/ store value for y
		INPUT				/ get value for z
		STORE		z		/ store value for z
If2,		SUBT		y		/ acc = y - x
		SKIPCOND	800		/ if > 0 then x <= y
		JUMP		ElseIf2
		CLEAR
		LOAD		y
		ADD		One		/ y + 1
		STORE		y
		JUMP		ElseIf2
ElseIf2,	CLEAR
		LOAD		x
		SUBT		z
		SKIPCOND	400		/ skip if x = z
		JUMP		IfDif2
		LOAD		z
		ADD		One		/ z + 1
		STORE		z
		JUMP		IfDif2
IfDif2,		CLEAR				// if x != z
		LOAD		y
		SUBT		One		/ y - 1
		STORE		y
		JUMP		Done2
Done2,		CLEAR
		LOAD		x
		OUTPUT
		CLEAR
		LOAD		y
		OUTPUT
		CLEAR
		LOAD		z
		OUTPUT
		CLEAR
		LOAD		Zero		/ Sets x to 0 for next segment
		STORE		x
		JUMP		While3
x,		DEC		0
y,		DEC		0
z,		DEC		0
One,		DEC		1
Zero,		DEC		0

/ Segment 3
While3,		LOAD		x
		SUBT		Ten
		SKIPCOND	000
		JUMP		EndWhile3
		ADD		Ten
		ADD		One
		STORE		x
		LOAD		Sum
		ADD		One
		STORE		Sum
		JUMP		While3	
EndWhile3,	LOAD		Sum
		OUTPUT
		HALT
Sum,		DEC		0
Ten,		DEC		10